# data-logger

This is a set of firmware for autonomously logging sensor measurements
(e.g. for environmental monitoring purposes) for the
[MC HCK](http://www.mchck.org/).

This firmware takes advantage of the low power consumption of the MC
HCK to allow sensor values to be logged for months on end.

## building

Simply clone the respository into the `mchck/examples` directory and
run `make flash`,

     $ git clone https://github.com/bgamari/mchck
     $ cd mchck
     $ git checkout temp-gather
     $ cd examples
     $ git clone https://github.com/bgamari/data-logger
     $ cd data-logger
     $ make
     $ ./data-logger start --sample-period=60

## using

The `data-logger` program in this repository provides an easy-to-use
interface to the functions of the device. The `info` subcommand
provides various details of the device and its status. After plugging
in a new device, its output will look something like this,

    $ ./data-logger info
    firmware version: 0136b40382c69b1dfd627ef6dadbfe6517eb8402
    device ID: 24404e45-2d0011-ffff0052-ffffffff
    samples collected: 0
    flash: mfg=ef memtype=40 capacity=14
    RTC time: 1970-01-01T00:00:00 = 0
    sample period: 30 seconds
    acquisition: stopped
    
    sensors:
    1 	onboard-temperature           	Kelvin    
    2 	thermistor                    	Kelvin    
    3 	thermistor                    	Kelvin    
    4 	conductivity                  	arbitrary 

To begin data acquisition use the `start` command,

    $ ./data-logger start --sample-period=90
    The device time doesn't look valid. I've updated it for you.
    Acquisition started sampling every 90 seconds

Here we see that `data-logger` has noticed that the device's time
isn't set. It has set the clock to the current UTC time. The device is now taking data.

Finally, the collected data can be downloaded with the `fetch` command,

    $ ./data-logger fetch
    # time         sensor    value
    1389105233     1         16.0150
    1389105233     3         304.0020
    1389105233     2         294.0020
    1389140502     1         16.2590
    ...

We described a subset of the functions of `data-logger`. `data-logger
--help` for a more thorough description.

## internal command set

The device exposes a CDC-ACM device over its USB interface. There is a
very primitive command set for communicating with the device,

 * `a=[bool]`: Start or stop acquisition
 * `f`: Force taking a sample
 * `v=[bool]`: Enable/disable verbose mode. In verbose mode the
   device outputs each sample taken to the console.
 * `Fi`: Print identity of FLASH device
 * `Fs`: Print status of FLASH device
 * `g [start] [count]`: Print sample numbers `start` to `start+count`
 * `t=[time]`: Set RTC time in seconds
 * `t`: Print RTC time in seconds
 * `T=[time]`: Set time between samples (sample period)
 * `T`: Print sample period
 * `l`: Print last acquired sample
 * `n`: Print number of samples taken
 * `s`: List configured sensors
 * `V`: Print firmware version (commit id)
 * `I`: Print device ID
 * `pp`: Enter power-saving mode
 * `R`: Recover last sample index after power-loss
 * Operations acting on non-volatile configuration
     * `B`: Get acquire-on-boot flag
     * `B=[bool]`: Set acquire-on-boot flag
     * `N`: Print friendly name of device
     * `N=[string]`: Set friendly name of device
     * `S`: Save non-volatile configuration
 
`bool` is either `0` or `1`.

## Stored samples

The primary function of the device is to store sensor samples to the
MC HCK's on-board FLASH memory for later retreival. If the device
loses power, it will lose track of the location of the last sample it
wrote. For this reason, it is necessary for the device to scan the
FLASH to recover this location. This is done with the `R` command.

## Power-saving mode

Note: This isn't completely implemented yet.

This is the mode the device should be in while in the field taking
measurements. Here most of the functions of the device are
disabled. It is necessary to wake up the device with the "wake up"
button before the USB interface can be used.
