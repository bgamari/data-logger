#!/usr/bin/python

import argparse
import logging
import time
import datetime
from data_logger import DataLogger

#logging.basicConfig(level=logging.DEBUG)

def fetch_handler(logger, args):
    nsamples = logger.get_sample_count()

    start = 0
    count = nsamples
    if args.start is not None:
        start = args.start
        count = nsamples - start

    if args.count is not None:
        if start + args.count > nsamples:
            raise RuntimeError('Too many samples requested')
        count = args.count

    print("# time\tsensor\tvalue")
    for sample in logger.fetch_samples(start, count):
        (time, sensor, value) = sample
        print("%-10d\t%-2d   \t%-3.4f" % (time, sensor, value))

def start_handler(logger, args):
    logger.set_acquisition_state(True)
    t = logger.get_sample_period()
    print "Acquisition started sampling every %d seconds" % t

def stop_handler(logger, args):
    logger.set_acquisition_state(False)
    print "Acquisition stopped"

def stop_handler(logger, args):
    logger.stop_sampling()

def status_handler(logger, args):
    count = logger.get_sample_count()
    print('samples collected: %d' % count)
    print(logger.identify_flash())
    t = logger.get_rtc_time()
    dt = datetime.datetime.utcfromtimestamp(t).isoformat()
    print('RTC time: %s = %d' % (dt, t))
    print('sample period: %d seconds' % logger.get_sample_period())
    print('acquisition: %s' %
          ('running' if logger.get_acquisition_state() else 'stopped'))
    print('')
    print("sensors:")
    for (sid, name, unit) in logger.list_sensors():
        print("%-2d\t%-15s\t%-10s" % (sid, name, unit))

def print_last_handler(logger, args):
    if args.force_sample:
        logger.force_sample()
        time.sleep(0.1)
    print("# time            sensor      value")
    for (t, sensor, value) in logger.get_last_sample():
        print("%-10d        %-2d          %-3.4f" % (t, sensor, value))

def set_rtc_handler(logger, args):
    epoch_time = time.time()
    logger.set_rtc_time(epoch_time)

parser = argparse.ArgumentParser(description="Interface to mchck data-logger firmware")
parser.add_argument('-d', '--device', metavar='FILE', help='data-logger ACM device')
subparsers = parser.add_subparsers(help='sub-command help', dest='mode')

fetch = subparsers.add_parser('fetch', help='fetch samples from device')
fetch.set_defaults(func=fetch_handler)
fetch.add_argument('-s', '--start', type=int, help='sample index to start from')
fetch.add_argument('-n', '--count', type=int, help='number of samples to dump')

start = subparsers.add_parser('start', help='start sample acquisition')
start.set_defaults(func=start_handler)
start.add_argument('-T', '--sample-period', type=int, metavar='SECONDS',
                   help='time between samples in seconds')

start = subparsers.add_parser('stop', help='stop sample acquisition')
start.set_defaults(func=stop_handler)

status = subparsers.add_parser('status', help='fetch samples from device')
status.set_defaults(func=status_handler)

set_rtc = subparsers.add_parser('set-rtc', help='set the real-time clock time on the device')
set_rtc.set_defaults(func=set_rtc_handler)

last = subparsers.add_parser('last', help='fetch samples from device')
last.add_argument('-f', '--force-sample', action='store_true', help='Force a sample')
last.set_defaults(func=print_last_handler)

args = parser.parse_args()
logger = DataLogger(args.device)
if args.func:
    args.func(logger, args)
